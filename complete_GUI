import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import time
from joblib import load
import torch
import warnings
import logging

# Setup logging
logging.basicConfig(filename='app.log', level=logging.DEBUG, 
                    format='%(asctime)s %(levelname)s: %(message)s')

# ----------------------------
# EEGCNN PyTorch Model
# ----------------------------
class EEGCNN(torch.nn.Module):
    def __init__(self, input_channels, output_dim, seq_length):
        super(EEGCNN, self).__init__()
        self.conv1 = torch.nn.Conv1d(input_channels, 32, kernel_size=1)
        self.relu1 = torch.nn.ReLU()
        self.conv2 = torch.nn.Conv1d(32, 64, kernel_size=1)
        self.relu2 = torch.nn.ReLU()
        self.fc1 = torch.nn.Linear(64 * seq_length, 128)
        self.relu3 = torch.nn.ReLU()
        self.fc2 = torch.nn.Linear(128, output_dim)

    def forward(self, x):
        x = self.relu1(self.conv1(x))
        x = self.relu2(self.conv2(x))
        x = x.view(x.size(0), -1)
        x = self.relu3(self.fc1(x))
        x = self.fc2(x)
        return x

# Load EEGCNN model
@st.cache_resource
def load_eegcnn_model():
    try:
        model = EEGCNN(input_channels=64, output_dim=64, seq_length=1)
        model.load_state_dict(torch.load("eeg_cnn_model.pth", map_location=torch.device("cpu")))
        model.eval()
        logging.info("EEGCNN model loaded successfully.")
        return model
    except FileNotFoundError:
        st.error("Error: 'eeg_cnn_model.pth' file not found in the working directory.")
        logging.error("EEGCNN model file not found.")
        return None
    except Exception as e:
        st.error(f"Error loading EEGCNN model: {e}")
        logging.error(f"EEGCNN model loading failed: {e}")
        return None

# Load ML model for stress detection
@st.cache_resource
def load_stress_model():
    try:
        model = load("NeuroLens.joblib")
        logging.info("Stress model loaded successfully.")
        return model
    except FileNotFoundError:
        st.error("Error: 'NeuroLens.joblib' file not found in the working directory.")
        logging.error("Stress model file not found.")
        return None
    except Exception as e:
        st.error(f"Error loading stress model: {e}")
        logging.error(f"Stress model loading failed: {e}")
        return None

# Inject Custom CSS for styling
def local_css():
    st.markdown("""
        <style>
        html, body, [class*="css"] {
            background-color: #0f0c29;
            background-image: radial-gradient(circle at top left, #0f0c29, #302b63 40%, #24243e 90%);
            color: #f0f0f0;
            font-family: 'Segoe UI', sans-serif;
        }
        h1, h2, h3, h4 {
            background: linear-gradient(90deg, #f81ce5, #7928ca, #2afadf);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            font-weight: 800;
        }
        .stAlert > div {
            font-size: 18px;
            font-weight: 600;
            background: linear-gradient(to right, #7928ca, #ff0080);
            color: white;
            border-radius: 8px;
            padding: 10px;
        }
        .stButton > button {
            background: linear-gradient(to right, #7928ca, #ff0080);
            border: none;
            color: white;
            font-weight: 600;
            padding: 0.75em 1.5em;
            border-radius: 12px;
            box-shadow: 0 0 12px rgba(248, 28, 229, 0.6);
            transition: all 0.3s ease-in-out;
        }
        .stButton > button:hover {
            background: linear-gradient(to right, #ff4d4d, #f81ce5);
            transform: scale(1.05);
            box-shadow: 0 0 20px rgba(255, 77, 255, 0.8);
        }
        .stFileUploader {
            background-color: rgba(25, 25, 50, 0.6);
            border: 2px dashed #7928ca;
            border-radius: 10px;
            padding: 1rem;
            backdrop-filter: blur(10px);
        }
        .stMarkdown {
            color: #dcdcdc;
        }
        .main > div {
            padding-top: 2rem;
        }
        </style>
    """, unsafe_allow_html=True)

# Load EEG CSV
def load_data(file):
    try:
        df = pd.read_csv(file)
        if df.shape[1] < 66:
            st.error("Invalid CSV format: Must contain 64 EEG channels, timestamp, and label columns.")
            logging.error("Invalid CSV format: Insufficient columns.")
            return None, None, None
        if df.isna().any().any():
            st.warning("CSV contains NaN values. Filling with zeros.")
            df = df.fillna(0)
            logging.info("NaN values in CSV filled with zeros.")
        X = df.iloc[:, :-2]
        timestamps = df.iloc[:, -2]
        logging.info(f"CSV loaded: {len(df)} rows, {X.shape[1]} features.")
        return df, X, timestamps
    except Exception as e:
        st.error(f"Error loading CSV file: {e}")
        logging.error(f"CSV loading failed: {e}")
        return None, None, None

# Predict stress
def predict_stress(model, row):
    try:
        with warnings.catch_warnings():
            warnings.simplefilter("ignore")
            return model.predict(row)[0]
    except Exception as e:
        st.error(f"Error predicting stress: {e}")
        logging.error(f"Stress prediction failed: {e}")
        return 0

# Generate calming signal
def generate_calming_signal(eegcnn_model, current_X):
    try:
        if current_X.shape[0] != 64:
            st.error("Input EEG frame must have 64 channels.")
            logging.error("Invalid EEG frame: Incorrect number of channels.")
            return None
        current_X = current_X.reshape(1, 64, 1)
        input_tensor = torch.tensor(current_X, dtype=torch.float32)
        with torch.no_grad():
            predicted = eegcnn_model(input_tensor).numpy()[0]
        logging.info(f"Calming signal generated: min={predicted.min()}, max={predicted.max()}")
        return predicted
    except Exception as e:
        st.error(f"Error generating calming signal: {e}")
        logging.error(f"Calming signal generation failed: {e}")
        return None

# Real-time EEG Plotting
def create_dynamic_plot(X, timestamps):
    model = load_stress_model()
    eegcnn_model = load_eegcnn_model()
    if model is None or eegcnn_model is None:
        st.error("Cannot proceed: Models failed to load.")
        logging.error("Models not loaded, aborting dynamic plot.")
        return

    # Initialize session state
    if "paused" not in st.session_state:
        st.session_state.paused = False
    if "last_end" not in st.session_state:
        st.session_state.last_end = None
    if "calming_signal_active" not in st.session_state:
        st.session_state.calming_signal_active = False

    # Select first 4 channels excluding 'FC3'
    available_channels = [col for col in X.columns if col != 'Fc3.']
    selected_channels = available_channels[:4]
    if len(selected_channels) < 4:
        st.warning("CSV must have at least 4 EEG channels excluding 'FC3'.")
        logging.warning("Insufficient channels for plotting after excluding 'FC3'.")
        return

    window_size = 300

    # Create three columns with adjusted ratios for larger Graph 3
    with st.container():
        col1, col2, col3 = st.columns([3, 1, 2])

        # EEG plot setup (Graph 1)
        with col1:
            fig_eeg, ax_eeg = plt.subplots(figsize=(8, 6))
            eeg_placeholder = st.empty()
            eeg_prediction_placeholder = st.empty()

        # Calming signal plot setup (Graph 2)
        with col2:
            fig_calming, ax_calming = plt.subplots(figsize=(4, 6))
            ax_calming.set_title("Calming Signal (Z)")
            ax_calming.set_xlabel("Time (samples)")
            ax_calming.set_ylabel("Amplitude")
            ax_calming.grid(True)
            calming_placeholder = st.empty()

        # X-Z difference plot setup (Graph 3, larger size)
        with col3:
            fig_diff, ax_diff = plt.subplots(figsize=(6, 8))
            ax_diff.set_title("Impact In The Brain")
            ax_diff.set_xlabel("Time (samples)")
            ax_diff.set_ylabel("Amplitude")
            ax_diff.grid(True)
            diff_placeholder = st.empty()
            diff_prediction_placeholder = st.empty()

        message_placeholder = st.empty()
        pause_button_placeholder = st.empty()
        progress = st.progress(0)

    # Pause/Resume Button
    pause_label = "Resume" if st.session_state.paused else "Pause"
    if pause_button_placeholder.button(pause_label, key="pause_resume"):
        st.session_state.paused = not st.session_state.paused
        pause_button_placeholder.empty()
        return

    if st.session_state.paused:
        return

    calming_signal_active = st.session_state.calming_signal_active
    calming_signals = []  # Store calming signals for each time step
    x_minus_z_values = []  # Store X - Z values for each time step

    total_steps = (len(X) - window_size) // 10 + 1
    start_index = st.session_state.last_end if st.session_state.last_end is not None else window_size

    # Define a color palette for Graphs 1 and 3
    colors = plt.cm.tab10(np.linspace(0, 1, 4))  # 4 distinct colors for 4 channels

    for i, end in enumerate(range(start_index, len(X), 10)):
        try:
            st.session_state.last_end = end
            start = max(0, end - window_size)  # Ensure start is not negative
            ax_eeg.clear()
            ax_calming.clear()
            ax_diff.clear()

            # Graph 1: EEG Waveform (first 4 channels excluding 'FC3')
            eeg_data = X[selected_channels].iloc[start:end].values
            if eeg_data.size == 0:
                logging.warning(f"No data for EEG plot at end={end}, start={start}")
                continue
            for idx, ch in enumerate(selected_channels):
                ax_eeg.plot(range(end - start), eeg_data[:, idx], label=ch, linewidth=1, color=colors[idx])
            ax_eeg.set_xlim(0, window_size)
            ax_eeg.set_ylim(eeg_data.min() - 0.1 * abs(eeg_data.min()), eeg_data.max() + 0.1 * abs(eeg_data.max()))
            ax_eeg.set_xlabel("Time (samples)")
            ax_eeg.set_ylabel("Amplitude")
            ax_eeg.set_title("EEG Waveform")
            ax_eeg.legend(loc='upper right')
            ax_eeg.grid(True)
            eeg_placeholder.pyplot(fig_eeg)

            # Stress Prediction for Graph 1
            row_data = X.iloc[end - 1].values.reshape(1, -1)
            timestamp = timestamps.iloc[end - 1]
            prediction = predict_stress(model, row_data)
            logging.info(f"EEG Prediction at {timestamp}: {prediction}")

            # Graph 1 Prediction Display
            if prediction == 1:
                eeg_prediction_placeholder.markdown(
                    f"<div style='color:#ff4d4d; font-size:20px;'>⏱ {timestamp} | ⚠️ <strong>Stress Detected!</strong></div>",
                    unsafe_allow_html=True
                )
                message_placeholder.info("💆 Releasing Distress Signal...")
                if row_data.shape[1] != 64:
                    st.error("Input EEG frame must have 64 channels.")
                    logging.error("Invalid EEG frame for calming signal.")
                    continue
                latest_eeg_frame = row_data.reshape(64)
                latest_calming_signal = generate_calming_signal(eegcnn_model, latest_eeg_frame)
                calming_signal_active = True
            else:
                if calming_signal_active:
                    eeg_prediction_placeholder.markdown(
                        f"<div style='color:#00ff99; font-size:20px;'>⏱ {timestamp} | ✅ <strong>Stress Reduced!</strong></div>",
                        unsafe_allow_html=True
                    )
                    calming_signal_active = False
                else:
                    eeg_prediction_placeholder.markdown(
                        f"<div style='color:#00ff99; font-size:20px;'>⏱ {timestamp} | ✅ No Stress</div>",
                        unsafe_allow_html=True
                    )
                message_placeholder.empty()

            # Compute calming signal and X - Z for the current row
            if prediction == 1 and latest_calming_signal is not None:
                calming_signals.append(latest_calming_signal)
                x_minus_z = latest_eeg_frame - latest_calming_signal
                x_minus_z_values.append(x_minus_z)
            else:
                calming_signals.append(np.zeros(64))  # Placeholder for no stress
                x_minus_z_values.append(X.iloc[end - 1].values[:64])  # Use original EEG as placeholder

            # Maintain window size for calming signals and X - Z
            while len(calming_signals) > window_size:
                calming_signals.pop(0)
                x_minus_z_values.pop(0)

            # Graph 2: Calming Signal (Z)
            if calming_signals:
                for ch_idx, ch in enumerate(selected_channels[:1]):  # Limit to one channel for clarity
                    ch_index = list(X.columns).index(ch)
                    signal_values = [cs[ch_index] for cs in calming_signals[-window_size:]]
                    if signal_values and any(abs(v) > 1e-10 for v in signal_values):  # Check for non-zero data
                        ax_calming.plot(range(len(signal_values[-window_size:])), signal_values[-window_size:], label=f"{ch} (Z)", color="lime", linewidth=1)
                    else:
                        logging.info(f"Calming signal flat or zero for {ch} at end={end}")
                ax_calming.set_xlim(0, window_size)
                signal_min = min([min(cs) for cs in calming_signals[-window_size:]] or [-1e-5], default=-1e-5)
                signal_max = max([max(cs) for cs in calming_signals[-window_size:]] or [1e-5], default=1e-5)
                ax_calming.set_ylim(signal_min - 0.1 * abs(signal_min), signal_max + 0.1 * abs(signal_max))
                ax_calming.set_xlabel("Time (samples)")
                ax_calming.set_ylabel("Amplitude")
                ax_calming.set_title("Calming Signal (Z)")
                ax_calming.legend(loc='upper right')
                ax_calming.grid(True)
                calming_placeholder.pyplot(fig_calming)

            # Graph 3: X - Z Waveform (first 4 channels excluding 'FC3', larger size)
            if x_minus_z_values:
                x_minus_z_row = x_minus_z_values[-1].reshape(1, -1)  # Predict on latest X - Z
                diff_prediction = predict_stress(model, x_minus_z_row) if x_minus_z_values[-1].any() else 0
                for ch_idx, ch in enumerate(selected_channels):
                    ch_index = list(X.columns).index(ch)
                    diff_values = [xz[ch_index] for xz in x_minus_z_values[-window_size:]]
                    if diff_values and any(abs(v) > 1e-10 for v in diff_values):  # Check for non-zero data
                        ax_diff.plot(range(len(diff_values[-window_size:])), diff_values[-window_size:], label=f"{ch} (X - Z)", color=colors[ch_idx], linewidth=1)
                    else:
                        logging.info(f"X-Z waveform flat or zero for {ch} at end={end}")
                ax_diff.set_xlim(0, window_size)
                diff_min = min([min(xz) for xz in x_minus_z_values[-window_size:]] or [-1e-5], default=-1e-5)
                diff_max = max([max(xz) for xz in x_minus_z_values[-window_size:]] or [1e-5], default=1e-5)
                ax_diff.set_ylim(diff_min - 0.1 * abs(diff_min), diff_max + 0.1 * abs(diff_max))
                ax_diff.set_xlabel("Time (samples)")
                ax_diff.set_ylabel("Amplitude")
                ax_diff.set_title("Impact In The Brain")
                ax_diff.legend(loc='upper right')
                ax_diff.grid(True)
                diff_placeholder.pyplot(fig_diff)

                # Graph 3 Prediction Display
                if diff_prediction == 1:
                    diff_prediction_placeholder.markdown(
                        f"<div style='color:#ff4d4d; font-size:20px;'>⏱ {timestamp} | ⚠️ <strong>Stress Detected!</strong></div>",
                        unsafe_allow_html=True
                    )
                else:
                    if calming_signal_active:
                        diff_prediction_placeholder.markdown(
                            f"<div style='color:#00ff99; font-size:20px;'>⏱ {timestamp} | ✅ <strong>Stress Reduced!</strong></div>",
                            unsafe_allow_html=True
                        )
                    else:
                        diff_prediction_placeholder.markdown(
                            f"<div style='color:#00ff99; font-size:20px;'>⏱ {timestamp} | ✅ No Stress</div>",
                            unsafe_allow_html=True
                        )

            # Update session state
            st.session_state.calming_signal_active = calming_signal_active

            progress.progress(min(i / total_steps, 1.0))
            time.sleep(0.2)
        except Exception as e:
            st.error(f"Error in dynamic plot loop: {e}")
            logging.error(f"Dynamic plot loop failed: {e}")
            break

    # Cleanup
    plt.close(fig_eeg)
    plt.close(fig_calming)
    plt.close(fig_diff)
    st.success("🎉 Real-time EEG animation completed.")
    progress.empty()
    message_placeholder.empty()
    logging.info("Dynamic plot completed.")

# ----------------------------
# Streamlit App Entry
# ----------------------------
def main():
    st.set_page_config(page_title="NeuroCalm - EEG Stress Detection", layout="wide", page_icon="🧠")
    local_css()

    st.title("NeuroCalm - EEG Stress Detection Dashboard")
    st.markdown("Upload your EEG data to detect **stress levels** and counteract them with our AI calming system.")

    # Check if models are loaded
    if load_stress_model() is None or load_eegcnn_model() is None:
        st.error("Cannot start: Required models are missing or failed to load.")
        logging.error("Models missing, app startup aborted.")
        return

    uploaded_file = st.file_uploader("📂 Upload EEG CSV File", type="csv")

    if uploaded_file is not None:
        df, X, timestamps = load_data(uploaded_file)

        if df is not None:
            st.success("✅ Data loaded successfully.")
            st.write(f"📊 Total Records: {len(df)} | Features: {X.shape[1]}")

            if st.button("▶ Start EEG Prediction"):
                with st.spinner("Processing EEG signals and predicting stress..."):
                    try:
                        create_dynamic_plot(X, timestamps)
                    except Exception as e:
                        st.error(f"Error during EEG prediction: {e}")
                        logging.error(f"EEG prediction failed: {e}")

if __name__ == "__main__":
    main()
